// #ifdef __MODULE_19__
#pragma once

#include <string>
const std::string string_tasks[] = {
    "\t\t\tЗадание 1. Разработка программы поиска слов в файле\n  Что нужно сделать\n  Составьте небольшой текстовый файл «words.txt», в котором последовательно, через пробелы и переносы строк расположены различные слова. Можете использовать любые англоязычные слова. Разработайте программу, которая искала бы среди этих слов нужное пользователю и выводила бы общее количество повторений этого слова. 0 — если слово вообще не присутствует в файле.\n",
    "\t\t\tЗадание 2. Разработка просмотрщика текстовых файлов\n  Что нужно сделать\n  Разработайте простейший просмотрщик текстовых файлов. В начале программы пользователь вводит путь к текстовому файлу, который требуется открыть и просмотреть. Внутренности файла необходимо вывести в стандартный вывод. Программа должна работать для любых текстовых файлов в формате TXT, но вы можете создать и свой отдельный файл для теста. Главное, чтобы файл был англоязычным, дабы избежать проблем с кодировками.\n",
    "\t\t\tЗадание 3. Реализация программы чтения ведомости\n  Что нужно сделать\n  Реализуйте программу чтения информации из ведомости по учёту выплат. Сама ведомость представляет собой следующую таблицу:\n  - имя и фамилия человека;\n  - количество денег, которые были выплачены лицу;\n  - дата выплаты в формате ДД.ММ.ГГГГ.\n  На основе данных из ведомости следует подсчитать общее количество выплаченных средств и определить человека с максимальной суммой выплат.\n  Пример данных ведомости\n    Tom Hanks 35500 10.11.2020\n    Rebecca Williams 85000 1.1.2021\n    Sally Field 15600 15.8.2021\n    Michael Humphreys 29400 23.5.2020\n    Harold Herthum 74300 9.6.2019\n    George Kelly 45000 12.3.2018\n    Bob Penny 12500 13.5.2020\n    John Randall 23400 2.10.2020\n    Sam Anderson 6500 15.7.2020\n    Margo Moorer 12350 24.2.2019\n",
    "\t\t\tЗадание 4. Разработка детектора PNG-файла\n  Что нужно сделать\n  Разработайте программу, которая получает на вход, в стандартный ввод, путь к файлу. На выходе программа должна определить, является ли данный файл PNG-изображением. Данная процедура не просто должна смотреть на расширение файла, но и произвести минимальный анализ его внутренностей, в бинарном режиме.\n  Внутренности валидного бинарного файла начинаются со специального 8-байтового заголовка. Нас будут интересовать первые четыре байта. Первый байт всегда имеет значение −119 (число со знаком минус), а следующие — это просто символы ‘P’, ‘N’, ‘G’, расположенные друг за другом. Обратите внимание, что все они в верхнем регистре.\n  По результатам проверки пути и внутренностей требуется сообщить пользователю о результате проверки в стандартный вывод.\n",
    "\t\t\tЗадание 5. Реализация игры «Что? Где? Когда?»\n  Что нужно сделать\n  Реализуйте простую версию интеллектуальной игры «Что? Где? Когда?».\n\n  Как происходит игра\n  В начале каждого хода игроки вращают волчок, то есть выбирают сектор на столе, который сейчас играет. Всего таких секторов 13. Сектор выбирается так: с клавиатуры вводится офсет (смещение) относительно текущего сектора на барабане. Исходя из этого офсета вычисляется новый активный сектор, который и будет играть в этом ходе. Если выпавший сектор уже играл, выбирает следующий неигравший за ним. В начале всей игры стрелка установлена на первом секторе.\n  Как только играет какой-то из секторов, с него берётся письмо с вопросом — то есть считывается из файла данного сектора. Вопрос показывается на экране.\n  После того как вопрос показан, от игрока ожидается ответ на него. Игрок вводит этот ответ с помощью стандартного ввода. То, что он ввёл, сравнивается с ответом, который хранится во втором файле, ассоциированном с активным сектором. Данный файл должен содержать лишь одно слово-ответ.\n  Если ответ знатока-игрока был правильным, ему начисляется один балл. Если неверен, то балл уходит телезрителям.\n  Игра продолжается до тех пор, пока или игрок, или зрители не наберут шесть баллов. После этого называется победитель и программа заканчивает работу.\n"
};

extern const std::string equals;
const std::string CUR_DIR = "D:\\Study\\skillbox\\Developer_CPP\\Module_19\\";
const std::string DOCS_DIR = "docs\\";

void Task_19_1();
void Task_19_2();
void Task_19_3();
void Task_19_4();
void Task_19_5();
// #endif

/* Задание 9. Яйца* (дополнительное задание)
 *  В рамках программы колонизации Марса компания «Спейс Инжиниринг» вывела особую породу черепах,
 *  которые должны размножаться, откладывая яйца в марсианском грунте. Откладывать яйца слишком
 *  близко к поверхности опасно из-за радиации, а слишком глубоко опасно из-за давления грунта и
 *  недостатка кислорода. Вообще, факторов много, но специалисты проделали большую работу и
 *  предположили, что уровень опасности для черепашьих яиц рассчитывается по формуле
 *  D = x^3 − 3x^2 − 12x + 10, где x — глубина кладки в метрах, а D — уровень опасности в условных
 *  единицах. Для тестирования гипотезы нужно взять пробу грунта на безопасной, согласно формуле,
 *  глубине.
 *  Напишите программу, находящую такое значение глубины х, при котором уровень опасности наиболее
 *  близок к нулю, учитывая допустимое отклонение. На вход программе подаётся максимально
 *  допустимое отклонение уровня опасности от нуля, а программа должна рассчитать приблизительное
 *  значение х, удовлетворяющее этому отклонению. Известно, что глубина точно больше нуля и меньше
 *  четырёх метров.
 *  Обеспечьте контроль ввода. */

#include <iostream>
#include <cmath>
#include "Module_08.hpp"

void Task_08_9() {
    std::cout << equals << string_tasks[8] << equals;

    float minX = 0.0f, maxX = 4.0f;
    float D, x, eps;
    float D_minX, D_maxX;

    // безопасный ввод отклонения
    do {
        std::cout << "Введите максимально допустимое отклонение уровня опасности: ";
        std::cin >> eps;
        if (eps <= 0.0f)
            std::cout << "ОШИБКА! Максимально допустимое отклонение уровня опасности должно быть положительным числом!\n";
    } while (eps <= 0.0f);

    // расчет необходимой глубины для соблюдения допустимого уровня опасности
    do {
        x = (minX + maxX) / 2.0f;
        D = std::fabs(std::pow(x, 3) - 3.0f * std::pow(x, 2) - 12.0f * x + 10.0f);

        std::cout << "На глубине " << x << " м. уровень опасности: " << D << "\n";
        
        D_minX = std::fabs(std::pow(minX, 3) - 3.0f * std::pow(minX, 2) - 12.0f * minX + 10.0f);
        D_maxX = std::fabs(std::pow(maxX, 3) - 3.0f * std::pow(maxX, 2) - 12.0f * maxX + 10.0f);
        if (D_minX < D_maxX) maxX = x;
        else                 minX = x;
    } while (std::fabs(D) > eps);

    std::cout << "Приемлемая глубина: " << x << " м.\n";
}

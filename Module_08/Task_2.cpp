/* Задание 2. Immolate Improved!
 *  Мы придумываем фэнтезийную онлайн-игру в жанре RPG. В орка стреляют огненными шарами разной
 *  степени мощности, но у него есть очки здоровья и показатель сопротивляемости магии. Очки
 *  здоровья, сопротивляемость магии и мощность огненного шара — это вещественные числа от нуля до
 *  единицы включительно. Чем больше мощность, тем больше урон здоровью, но чем больше
 *  сопротивляемость магии, тем урон меньше. Например, если сопротивляемость равна нулю (0%), то
 *  будет нанесён урон, равный мощности огненного шара. Если сопротивляемость равна единице
 *  (100%), урон будет равен нулю, даже если мощность заклинания максимальна.
 *  Напишите программу, в которой пользователь сначала задаёт количество здоровья и
 *  сопротивляемость магии орка, а после стреляет в него огненными шарами разной мощности, пока
 *  орк не погибнет. Мощность удара вводится с клавиатуры с каждым выстрелом. После каждого
 *  заклинания программа выводит на экран итоговый урон от удара и оставшиеся очки здоровья орка.
 *  Показатель сопротивляемости магии не изменяется при попадании. Обеспечьте контроль ввода.
 *  Обратите внимание, что сопротивляемость обозначает только долю от повреждения, которая
 *  приходится на орка. Пример:
 *  Урон 0.1, сопротивляемость 0.5, по орку будет нанесено 0.05 урона;
 *  Урон 0.2, сопротивляемость 0.5, по орку будет нанесено 0.1 урона;
 *  Урон 1, сопротивляемость 0.2, по орку будет нанесено 0.8 урона. */

#include <iostream>
#include "Module_08.hpp"

void Task_08_2() {
    std::cout << equals << string_tasks[1] << equals;

    float healthPoints, magicalResistance, fireballPower;

    // ввод очков здоровья
    do {
        std::cout << "Введите очки здоровья орка: ";
        std::cin >> healthPoints;
        if (healthPoints < 0.0f || healthPoints > 1.0f)
            std::cout << "ОШИБКА! Очки здоровья должны быть введены в пределах от 0 до 1 (вкл.)!\n";
    } while (healthPoints < 0.0f || healthPoints > 1.0f);

    // ввод сопротивляемости магии
    do {
        std::cout << "Введите сопротивляемость магии орка: ";
        std::cin >> magicalResistance;
        if (magicalResistance < 0.0f || magicalResistance > 1.0f)
            std::cout << "ОШИБКА! Сопротивляемость магии должна быть введена в пределах от 0 до 1 (вкл.)!\n";
    } while (magicalResistance < 0.0f || magicalResistance > 1.0f);

    // если сопротивляемость магии у орка равна единице, то бить по нему магическими шарами бесполезно
    if (magicalResistance == 1.0f)
        std::cout << "Любой магический урон по орку будет отражен!\nОрк уходит живым!\n";
    // иначе пробуем его бить до тех пор, пока не победим
    else {
        while (healthPoints != 0.0f) {
            // ввод урона огненным шаром
            do {
                std::cout << "Введите мощность огненного шара: ";
                std::cin >> fireballPower;
                if (fireballPower < 0.0f || fireballPower > 1.0f)
                    std::cout << "ОШИБКА! Урон огненного шара должен быть введен в пределах от 0 до 1 (вкл.)!\n";
            } while (fireballPower < 0.0f || fireballPower > 1.0f);

            // расчет нанесенного урона
            float damage = fireballPower - fireballPower * magicalResistance;
            healthPoints -= damage;
            if (healthPoints < 0.0f) healthPoints = 0.0f;

            // вывод на экран
            std::cout << "Итоговый урон: " << damage << ", оставшиеся очки здоровья: " << healthPoints << "\n";
        }

        std::cout << "Орк побежден!\n";
    }
}

#ifdef __MODULE_22__
#pragma once

#include <string>
#include <cstring>
const std::string string_tasks[] = {
    "\t\t\tЗадание 1. Телефонный справочник\n  Что нужно сделать\n  Напишите программу «Телефонный справочник».\n  На вход программе поступают запросы трёх типов:\n  * 69-70-30 Ivanov — добавить телефон и фамилию абонента в справочник\n  * 69-70-30 — узнать фамилию абонента по номеру телефона\n  * Ivanov — узнать телефон абонента по фамилии\n  Необходимо выводить в консоль ответ на запросы 2 и 3. Обратите внимание, что абоненты по разным номерам могут иметь одинаковые фамилии. В таком случае на запрос 3 необходимо выдать все номера через пробелы.\n  Операции запросов должны работать за O(logn) или O(logn × количество номеров с этой фамилией).\n",
    "\t\t\tЗадание 2. Регистратура\n  Что нужно сделать\n  Напишите программу «Регистратура».\n  На вход программе приходят строки с фамилиями или строка Next. Пришедшие люди становятся в очередь, а по запросу Next необходимо вызвать в регистратуру человека с фамилией, идущей первой в лексикографическом порядке (по алфавиту), и вывести его фамилию на экран. Фамилии пациентов могут повторяться.\n  Каждый запрос (на добавление и вывод) должен работать за O(logn).\n\n  Пример:\n  ← Sidorov\n  ← Ivanov\n  ← Ivanov\n  ← Petrov\n  ← Next\n  → Ivanov\n  ← Next\n  → Ivanov\n  ← Next\n  → Petrov\n",
    "\t\t\tЗадание 3. Анаграммы\n  Что нужно сделать\n  Напишите функцию, которая принимает две строки и возвращает true, если первая строка является анаграммой второй (то есть можно получить первую строку из второй путём перестановки букв местами), и false иначе. Для достижения хорошей асимптотики решения рекомендуется использовать std::map.\n\n  Пример анаграммы: лекарство — стекловар\n"
};

extern const std::string equals;
const std::string CUR_DIR(__FILE__, strlen(__FILE__) - strlen("Module_22.hpp"));
const std::string DOCS_DIR = "docs\\";

void Task_22_1();
void Task_22_2();
void Task_22_3();
#endif

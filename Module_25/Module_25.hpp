#ifdef __MODULE_25__
#pragma once

#include <string>
#include <cstring>
const std::string string_tasks[] = {
    "\t\t\tЗадание 1. Симулятор проведения операций\n  Что нужно сделать\n  Реализуйте простой симулятор проведения медицинской операции у пациента. Пользователь выступает в роли хирурга, который запрашивает инструменты у ассистента и применяет их сообразно ситуации.\n  Пользователь взаимодействует с программой с помощью команд. Команды не имеют сложной встроенной логики: они просто принимают нужные данные в качестве аргументов и выводят сообщения в консоль о выполнении. Данные команд — это одна или две двумерные точки в формате double с координатами X и Y соответственно.\n  Команда scalpel — принимает на вход две двумерные координаты начала и конца разреза или линии отсечения. При выполнении в консоль выводится сообщение о том, что был сделан разрез между введёнными координатами.\n  Команда hemostat принимает на вход одну точку, в которой требуется сделать зажим, о чём также сообщает в консоль.\n  Команда tweezers — пинцет, как и зажим, принимает одну точку для применения. Сообщение об этом выводится в консоль.\n  Команда suture — хирургическая игла, которая делает шов между двумя указанными точками.\n  Операция всегда начинается с команды scalpel и заканчивается командой suture. Для окончания работы программы их параметры-точки должны совпасть.\n  Программу требуется реализовать именно с помощью одного заголовочного файла и одного файла с исходным кодом (CPP). В заголовочном файле должны находиться функции-инструменты. В основном файле — основная логика программы, обработка ввода пользователя.\n\n  Советы и рекомендации:\n  - Создайте структуру с типом двумерной координаты (точки) вместе с набором функций для ввода этой координаты из консоли, её вывода в консоль и сравнения на предмет равенства. Для этих целей удобнее всего создать ещё один заголовочный файл.\n  - Обратите внимание на порядок команд.\n  - Заголовочные файлы с расширением .h следует расположить в папке include. Файлы исходного кода с расширением .cpp — в папке src.\n",
    "\t\t\tЗадание 2. Проект симулятора работы компьютера\n  Что нужно сделать\n  Реализуйте простую модель работы персонального компьютера в качестве многомодульного проекта. В компьютере несколько основных, условных компонент.\n  Центральный процессор (cpu) — должен иметь функцию compute, которая складывает 8 чисел из буфера оперативной памяти (см. далее) и выводит результат в консоль.\n  Оперативная память (ram) — содержит буфер на 8 целых чисел, которые можно заполнить функцией write и считать функцией read.\n  Жёсткий диск (disk) — имеет в себе две функции, save и load. Функция save должна сохранить состояние 8 чисел из оперативной памяти на постоянный носитель в файл data.txt. Функция load — загрузить их с носителя в оперативную память.\n  Графическая карта (gpu) — выводит в консоль 8 чисел из оперативной памяти.\n  Клавиатура (kbd) — позволяет ввести 8 чисел и разместить их в оперативной памяти.\n  Каждая компонента должна располагаться в отдельном модуле, с отдельным заголовочным файлом. Основной модуль программы (main.cpp) должен считывать пользовательский ввод команды, которая соответствует отдельным функциям устройств: sum (вычисление суммы), save (сохранить в файл), load (загрузить из файла), input (ввести с клавиатуры), display (вывести на экран). Команда exit — выходит из программы.\n\n  Советы и рекомендации:\n  - Тщательно продумайте зависимости между модулями и теми файлами, которые должны быть включены в исходные файлы. Не забывайте про #pragma once в заголовочных файлах.\n  - В заголовочных файлах модулей располагайте только объявления функций. Их определения должны быть уже в исходных файлах (CPP).\n"
};

extern const std::string equals;
const std::string CUR_DIR(__FILE__, strlen(__FILE__) - strlen("Module_25.hpp"));
const std::string TASK2_DOCS_DIR = "Task_2\\docs\\";

void Task_25_1();
void Task_25_2();
#endif

#ifdef __MODULE_17__
#pragma once

const std::string string_tasks[] = {
    "\t\t\tЗадача 1.\n  Что нужно сделать:\n  Написать функцию, принимающую два указателя на int и меняет местами содержимое данных указателей.\n  Пример:\n    int a = 10;\n    int b = 20;\n    swap(&a, &b);\n    std::cout << a << “ “ << b;\n    // 20 10\n",
    "\t\t\tЗадача 2.\n  Что нужно сделать:\n  Написать функцию, которая принимает указатель на тип int, по которому размещены 10 переменных типа int. Функция ничего не возвращает, но по тому же указателю элементы должны лежать в обратном порядке.\n",
    "\t\t\tЗадача 3.\n  Что нужно сделать:\n  Написать функцию, которая принимает указатель на char, по которому лежит строка.\n  Функция должна возвращать true, если вторая строка является подстрокой первой.\n  Пример:\n    const char* a = “Hello world“;\n    const char* b = “wor“;\n    const char* c = “banana“;\n    std::cout << substr(a,b) << “ “ << substr(a,c);\n    // true false\n\n  const является квалификатором типа, применяемым к переменным, значения которых нельзя изменять.\n  Например, если в коде написать:\n    const int a = 2;\n  то впоследствии значение переменной невозможно изменить, а запись вида\n    a = 3;\n  приведёт к ошибке компилятора.\n"
};

extern const std::string equals;

void Task_17_1();
void Task_17_2();
void Task_17_3();
#endif

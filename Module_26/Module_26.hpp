// #ifdef __MODULE_26__
#pragma once

#include <string>
const std::string string_tasks[] = {
    "\t\t\tЗадание 1. Реализация имитации аудиоплеера\n  Что нужно сделать\n  С помощью классов реализуйте программу имитации работы аудиоплеера. В плеере находится несколько аудиозаписей, доступных для воспроизведения. Для них вы должны создать отдельный класс Track. Полями этого класса должны быть: название, дата создания (здесь вы можете использовать тип std::tm) и продолжительность записи в секундах.\n  Сам плеер тоже реализуйте с помощью класса. Внутри он должен содержать список доступных записей и нужные для логики работы плеера поля.\n  Пользователь взаимодействует с программой с помощью команд:\n  - Команда play запрашивает у пользователя название записи для воспроизведения и начинает её воспроизведение. Воспроизведение симулируется с помощью вывода в консоль всей информации о записи. Если произведение какой-то записи уже начато, ничего не происходит.\n  - Команда pause. Ставит запись на паузу, о чём выводит соответствующее сообщение в консоль. Если запись уже на паузе или не воспроизводится вовсе, ничего не происходит.\n  - Команда next переходит к следующей записи для воспроизведения. Запись при этом выбирается случайно, как будто плеер работает в режиме shuffle.\n  - Команда stop прекращает воспроизведение текущей записи, если таковая имеется. Об этом выводится сообщение в консоль. Два раза остановить воспроизведение невозможно, так что команда должна срабатывать только в первом случае.\n  - Команда exit — выход из программы.\n\n  Советы и рекомендации\n  Забудьте про отдельные глобальные функции и используйте возможности классов и методов по максимуму.\n",
    "\t\t\tЗадание 2. Реализация программы симуляции мобильного телефона\n  Что нужно сделать\n  Реализуйте программу простой симуляции работы мобильного телефона.\n  По мобильному телефону можно звонить и отправлять СМС. Также мобильный телефон содержит адресную книгу. Телефон и отдельные записи адресной книги должны быть реализованы с помощью классов. Все номера телефонов задаются в формате +7 <10 цифр>.\n  Пользователь взаимодействует с программой с помощью команд:\n  - Команда add добавляет в адресную книгу новый номер телефона и ассоциирует его с именем контакта. Оба эти параметра команда получает от пользователя через стандартный ввод.\n  - Команда call запрашивает у пользователя имя контакта или номер телефона, на который требуется позвонить. Сам по себе звонок симулируется с помощью вывода в консоль сообщения CALL с номером телефона, на который осуществляется вызов.\n  - Команда sms. Запрашивает у пользователя номер телефона (или имя контакта), на который требуется послать сообщение. Само сообщение также вводится через стандартный ввод.\n  - Команда exit — выход из программы.\n\n  Советы и рекомендации\n  Сам по себе тип номера телефона вы тоже можете реализовать с помощью отдельного класса.\n",
    "\t\t\tЗадание 3. Реализация программы управления окном рабочего стола\n  Что нужно сделать\n  Реализуйте симуляцию работы окна в визуальном интерфейсе пользователя.\n  Окно располагается на виртуальном экране монитора, размером 80 × 50 точек. У окна есть несколько параметров, которые также задаются в пикселях: двумерные координаты левого верхнего угла и размеры, ширина и высота. Ширина и высота при этом не могут быть отрицательными, а координаты не могут выходить за область экрана.\n  Пользователь взаимодействует с программой с помощью команд:\n  - Команда move принимает вектор, на который надо сместить окно на экране. Сообщение с новыми координатами окна появляется на экране.\n  - Команда resize запрашивает из стандартного ввода новый размер окна. После изменения размера сообщение с новым размером выводится на экране.\n  - Команда display выводит текущее изображение монитора в консоль. 0 — это пиксель вне области окна, 1 — с окном.\n  - Команда close закрывает окно, выход из программы.\n  Советы и рекомендации\n  Сам экран монитора вы тоже можете реализовать с помощью класса.\n"
};

extern const std::string equals;

void Task_26_1();
void Task_26_2();
void Task_26_3();
// #endif

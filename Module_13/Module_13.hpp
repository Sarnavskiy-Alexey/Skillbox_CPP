#ifdef __MODULE_13__
#pragma once

const std::string string_tasks[] = {
    "\t\t\tЗадача 1\n  Необходимо из заданного пользователем вектора удалить число X.\n  Как работает программа\n  1. Пользователь вводит с клавиатуры число n — размер вектора, который надо заполнять.\n  2. Пользователь вводит n целых чисел, которые заполняют вектор.\n  3. Пользователь вводит значение — X. X — удаляемое из вектора значение. Необходимо удалить из вектора все элементы, которые равны заданному значению.\n  4. В конце программы необходимо вывести итоговое состояние вектора.\n",
    "\t\t\tЗадача 2\n  С помощью списка инициализации задаётся вектор цен на продукты (дробными числами). Таким же образом с помощью списка инициализации задаётся вектор покупок (в виде индексов), которые совершает человек. Необходимо вывести на экран итоговую стоимость покупок. Вектор цен и вектор покупок можно задать напрямую в коде.\n",
    "\t\t\tЗадача 3\n  Вам дали задание разработать хранилище для целочисленных значений во встраиваемой операционной системе. Такие системы работают в большей части техники, которая нас окружает: автомобилях, стиральных машинах, микроволновках, холодильниках. Только вот незадача: объём памяти этой системы очень небольшой, поэтому в хранилище не может находиться более 20 элементов.\n  В хранилище, являющееся вектором, с клавиатуры приходят целочисленные значения и помещаются один за другим.\n  При вводе «-1» с клавиатуры необходимо вывести всё содержимое хранилища (20 или менее элементов). При выводе элементы должны быть в том порядке, в котором они добавлялись.\n  Попробуйте написать максимально оптимизированное решение этой задачи, чтобы совершалось как можно меньше расширений и перемещений элементов внутри вектора.\n"
};

extern const std::string equals;

void Task_13_1();
void Task_13_2();
void Task_13_3();
#endif

#ifdef __MODULE_28__
#pragma once

#include <string>
const std::string string_tasks[] = {
    "\t\t\tЗадание 1. Заплыв на 100 метров\n  Что нужно сделать\n  Реализуйте симуляцию состязаний по заплыву на 100 метров.\n  Всего шесть дорожек и шесть пловцов. Имена пловцов указываются вначале из стандартного ввода. Каждый из них плывёт с разной скоростью, которая также задаётся пользователем при старте, через стандартный ввод в метрах в секунду.\n  Каждую секунду в стандартный вывод выдаётся информация о том, сколько проплыл тот или иной пловец.\n  Как только все пловцы коснулись 100-метровой отметки, заплыв заканчивается и выводится таблица с итоговыми результатами, отсортированная по возрастанию итогового времени заплыва.\n\n  Советы и рекомендации:\n  Используйте нити для реализации движения каждого пловца в отдельности.\n",
    "\t\t\tЗадание 2. Симуляция работы вокзала\n  Что нужно сделать\n  С помощью многопоточности реализуйте простую модель железнодорожного вокзала.\n  С трёх точек отправления в разное время отбывают три разных поезда с условными обозначениями A, B, C. Все они идут на один и тот же вокзал и могут дойти до него в разное время.\n  На этом целевом вокзале единовременно может находиться только один поезд. Остальные поезда должны ждать, пока уже занятое место освободится.\n  В начале программы пользователь последовательно вводит для каждого поезда время в пути до вокзала (в секундах). После этого поезда начинают своё движение за заданное количество времени. Как только поезд прибыл на вокзал, он ожидает от пользователя команды depart, которая сигнализирует о его отбытии с вокзала.\n  По всем событиям (прибытие на вокзал, ожидание свободного места, отбытие с вокзала) вместе с условным обозначением поезда выводятся сообщения в консоль.\n  Программа завершается, когда на вокзале побывают все три поезда.\n\n  Советы и рекомендации:\n  Используйте для вокзала отдельный мьютекс и симулируйте ожидание с помощью него.\n",
    "\t\t\tЗадание 3. Симуляция работы кухни онлайн-ресторана\n  Что нужно сделать\n  Требуется реализовать упрощённую модель работы кухни ресторана, работающего в режиме онлайн-доставки.\n  Онлайн-заказ поступает каждые 5–10 секунд. Это случайное блюдо из пяти: пицца, суп, стейк, салат, суши. Официант, принявший заказ онлайн, оставляет его у кухни. Если кухня свободна, она принимает заказ и спустя 5–15 секунд возвращает уже готовое блюдо на выдачу. Время определяется случайным образом с помощью функции std::rand() в указанных диапазонах.\n  Курьер приезжает каждые 30 секунд, забирает готовые блюда на выдаче и развозит их по заказчикам.\n  Программа завершается после 10 успешных доставок. На каждом из этапов, будь то заказ, или готовка, или доставка заказа, выводятся соответствующие сообщения в консоль.\n\n  Советы и рекомендации:\n  Для симуляции готовки, используйте отдельный мьютекс и запускайте отдельную нить ожидания с вызовом detach для неё.\n"
};

extern const std::string equals;

void Task_28_1();
void Task_28_2();
void Task_28_3();
#endif
